
@mixin required-field{
    &::after{
        color: red;
        content: " *";
    }
}

@mixin page-wide-section-wrapper{
    display: flex;
    justify-content: center;
    width: 100vw;
    height: auto;
    @content;
}

@mixin make-bgcolor-wide($color: white){ /// workaround to extend the background-color past a div wrapper
    &::before {
    content:"";
    background-color: $color;
    position: absolute;
    height: 100%;
    width: 200vw;
    left: -100vw;
    z-index: -1;
    @content;
  }
}

@mixin MQ($bp, $func){
    @if not map-has-key($MQ_breakpoints_map,$bp){
        @error "Your trying to call a 'break point' that does not exist in the MQ_breakpoints_map map used in the @mixin MQ().";
    }@else if not map-has-key($MQ_func_map, $func){
        @error "Your trying to use a $func that does not exist in the $MQ_func_map map used in the @mixin MQ().";
    }@else{
        @media(map-get($MQ_func_map,$func): map-get($MQ_breakpoints_map,$bp)){
            @content;
        }
    }   
}

@mixin place-awesome-icon($name, $size: null, $orientation: 'before'){
    @if map-has-key($awesome_icon_map,$name){
        font-size: $size;
        line-height: normal;
        &::#{$orientation}{
            display:flex;
            justify-content: center;
            font-family: "FontAwesome";
            content: map-get($awesome_icon_map,$name);
            @content;
        }
    }@else{
        @error "Your trying to call the font name '#{$name}' which does not exist in the awesome_icon_map used in the @mixin place-awesome-icon().";
    }
}

@mixin build-button($mode: darken, $bg_c: green, $hv_bg_c: null, $text_c: white, $hv_text_c: white, $height: 55px, $font_s: 1.125rem){
    // display:inline-flex;
    align-items: center;
    justify-content: center;
    background-color: $bg_c;
    color: $text_c;
    font-size: $font_s;
    height: $height;
    max-height: $height;
    width: auto;
    cursor: pointer;
    text-transform: uppercase;
    text-decoration: none;
    border-radius: 3px;
    white-space: normal;
    padding: 0 20px;
    &:hover{
        @if $mode == 'darken'{
            color:$hv_text_c;
            background-color: darken($bg_c,$default-darken-amt);
        } @else{
            color:$hv_text_c;
            background-color: $hv_bg_c;
        }
    }
    @content;
}


// helpers

@mixin rotate-phone-icon($deg: -45deg){
-webkit-transform: rotate($deg);
-moz-transform: rotate($deg);
-ms-transform: rotate($deg);
-o-transform: rotate($deg);
transform: rotate($deg);
}

@mixin clearfix{
content: "";
clear: both;
display: table;
}

@mixin fix-normalize-transparency($c){  // fixes the normalize.css transparency for anchor elements background colour.
    background-color: darken(rgba($color: $c, $alpha: 1.0),$darken-submenu-amt);
}

@mixin make-pretty-checkbox{
    // The Container
    .make-pretty-checkbox{
        display: block;
        position: relative;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }
    // Hide the browsers default checkbox 
    .make-pretty-checkbox input{
        position: absolute;
        opacity: 0;
        cursor: pointer;
        height: 0;
        width: 0;
    }
    // Create a custom checkbox
    .checkmark{
        position: absolute;
        top: 0;
        left: 0;
        background-color: #ddd;
        border-radius: 3px;
        border: 3px solid #333645;
        height: 32px;
        width: 32px;
        float: left;
        // margin-right: 20px;
        cursor: pointer;
        color:white;
    }
    // When the checkbox is checked add a background colour
    .make-pretty-checkbox input:checked ~ .checkmark{
        background-color: #333645;
    }
    // Create the checkmark indicator (hidden when not checked)
    .checkmark:after{
        content: "";
        position: absolute;
        display: none;
    }
    // Show the checkmark indicator when checked
    .make-pretty-checkbox input:checked ~ .checkmark::after{
        display: block;
    }
    // Style the checkmark indicator
    .make-pretty-checkbox .checkmark::after{
        left: 9px;
        top: 2px;
        width: 8px;
        height: 17px;
        border: solid white;
        border-width: 0 3px 3px 0;
        -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
        transform: rotate(45deg);
    }
    // Align the checkbox label. Needed due to the position:absolute container.
    .description{
        display: block;
        margin-left: 45px;
    }
}